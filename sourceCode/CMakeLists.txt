cmake_minimum_required(VERSION 3.5)
project(AbilityTree)

#define version
set(GUI_ABILITY_TREE_VER 1.0.0)
set(NET_CONFIG_TOOL_VERSION 1.1.0)
set(WIRESHARK_VERSION 1.1.0)
set(COMMUNICATION_TOOL_VERSION 1.1.1)
set(QUICKMACRO_VERSION 1.1.0)
set(PEFILEANALYAZER_VERSION 1.1.0)
set(PHOTOSTOOL_VERSION 1.0.0)
set(INJECTIONTOOL_VERSION 1.0.0)
set(PACKAGEDTOOL_VERSION 1.0.0)
set(INSTALLTOOL_VERSION 1.0.1)
set(SERVER_VERSION 1.0.0)


string(TIMESTAMP COMPILE_TIME %Y%m%d)
add_definitions(-DCOMPILE_TIME="${COMPILE_TIME}")
add_definitions(-DWIN32_LEAN_AND_MEAN)

#define name 
set(GUI_ABILITY_TREE AbilityTreeViewer)
set(NET_CONFIG_TOOL NetConfigTool)
set(WIRESHARK Wireshark)
set(COMMUNICATION_TOOL CommunicationTool)
set(QUICKMACRO QuickMacro)
set(PEFILEANALYAZER PeFileAnalyzer)
set(PHOTOSTOOL PhotosTool)
set(INJECTIONTOOL InjectionTool)
set(PACKAGEDTOOL PackagedTool)
set(INSTALLTOOL InstallTool)
set(SERVER Server)


#set path
set(LIBRARY_OUTPUT_PATH ${CMAKE_CURRENT_BINARY_DIR}/bin/)
set(EXECUTABLE_OUTPUT_PATH ${CMAKE_CURRENT_BINARY_DIR}/bin/)
set(DEPENDENSY_PATH ${CMAKE_CURRENT_SOURCE_DIR}/../3rdParty)
set(INSTALL_RELEASE_PATH ${CMAKE_CURRENT_SOURCE_DIR}/release)

set(CMAKE_CXX_STANDARD 11)

set(OpenCV_DIR "D:/OpenCV/build/x64/vc16/lib")
find_package(OpenCV QUIET)
if(${OPENCV_FOUND})
	message("OPENCV_FOUND " ${OpenCV_INCLUDE_DIRS})
    include_directories(${OpenCV_INCLUDE_DIRS})
    link_directories(${OpenCV_DIR})
    add_definitions(-DHAS_OPENCV)
endif()

include_directories(${CMAKE_CURRENT_SOURCE_DIR}/../include)

option(BUILD_InstallTool "" OFF)
option(BUILD_VIEWER "" OFF)
option(BUILD_Wireshark "" OFF)
option(BUILD_CommunicationTool "" OFF)
option(BUILD_PhotosTool "" OFF)
option(BUILD_PackagedTool "" OFF)
option(BUILD_QuickMacro "" OFF)
option(BUILD_NetConfigTool "" OFF)
option(BUILD_PeFileAnalyzer "" OFF)
option(BUILD_INJECTIONTOOL "" OFF)
option(BUILD_Server "" OFF)

set(QT_STATIC OFF)
if (${QT_STATIC})
		if (WIN32)
			add_definitions(-DQT_STATICPLUGIN)
			set(Qt5_DIR_BASE "C:/Qt/Qt5.12.12 Static")
			link_directories( "${Qt5_DIR_BASE}/lib/" )
			set(Qt5_DIR "${Qt5_DIR_BASE}/lib/cmake/Qt5")
			include_directories(${Qt5_DIR_BASE}/include/)
			link_directories( "${Qt5_DIR_BASE}/plugins/platforms/" )
		else()
			set(Qt5_DIR "/home/mier/Qt5.12.12/5.12.12/gcc_64/lib/cmake/Qt5")
		endif()

		set(BUILD_InstallTool ON)
else()
		if (WIN32)
		set(Qt5_DIR "C:/Qt/Qt5.12.12/5.12.12/msvc2017_64/lib/cmake/Qt5")
		else()
			set(Qt5_DIR "/home/mier/Qt5.12.12/5.12.12/gcc_64/lib/cmake/Qt5")
		endif()

		set(BUILD_VIEWER ON)
		set(BUILD_Wireshark ON)
		set(BUILD_CommunicationTool ON)
		set(BUILD_PhotosTool ON)
		set(BUILD_PackagedTool ON)
		set(BUILD_Server ON)

		if (WIN32)
		set(BUILD_QuickMacro ON)
		set(BUILD_NetConfigTool ON)
		set(BUILD_PeFileAnalyzer ON)
		set(BUILD_INJECTIONTOOL ON)
		endif()
endif()


find_package(Qt5 COMPONENTS Core Gui Widgets PrintSupport SerialPort Network QUIET)

if(NOT ${Qt5_FOUND})
	message("Qt5 not found!")
	return()
endif()
message("Qt5_DIR " ${Qt5_DIR})

if(BUILD_VIEWER)
	message("add_subdirectory: " AbilityTreeGUI)
	add_subdirectory(AbilityTreeGUI)
endif()

if(BUILD_Wireshark)
	message("add_subdirectory: " Wireshark)
add_subdirectory(Wireshark)
endif()

if(BUILD_NetConfigTool)
	message("add_subdirectory: " NetConfigTool)
add_subdirectory(NetConfigTool)
endif()

if(BUILD_CommunicationTool)
	message("add_subdirectory: " CommunicationTool)
add_subdirectory(CommunicationTool)
endif()

if(BUILD_QuickMacro)
	message("add_subdirectory: " QuickMacro)
add_subdirectory(QuickMacro)
endif()

if(BUILD_PeFileAnalyzer)
	message("add_subdirectory: " PeFileAnalyzer)
add_subdirectory(PeFileAnalyzer)
endif()

if(BUILD_PhotosTool)
	message("add_subdirectory: " PhotosTool)
add_subdirectory(PhotosTool)
endif()

if(BUILD_INJECTIONTOOL)
	message("add_subdirectory: " INJECTIONTOOL)
add_subdirectory(InjectionTool)
endif()

if(BUILD_PackagedTool)
	message("add_subdirectory: " PackagedTool)
add_subdirectory(PackagedTool)
endif()

if(BUILD_InstallTool)
	message("add_subdirectory: " InstallTool)
add_subdirectory(InstallTool)
endif()

if(BUILD_Server)
	message("add_subdirectory: " Server)
add_subdirectory(Server)
endif()

